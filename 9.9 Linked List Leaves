#include<iostream>
//#include"t1.cpp"
using namespace std;


struct node
{
int val;
node* next;
node(int val) : val(val) , next(NULL) {}
};

struct tree
{
int val;
tree* left;
tree* right;
tree(int val) : val(val) , left(NULL) , right(NULL) {}
};

class list
{
public:
    node* n;
    list(node* n) : n(n) {}
    void add(int val)
    {
        node* t = new node(val);
        n->next = t;
        n = t;
    }
};

void L(tree* root, list* l)
{
    if(root == NULL)
    {
        return;
    }
    if(!(root->left) && !(root->right))
    {
        l->add(root->val);
        return;
    }
  
    L(root->left, l);
    L(root->right, l);
}

node* LL(tree* root)
{
    node* n = new node(0);
    list* l = new list(n);
    L(root, l);
    node* t = n->next;
    delete n;
    return t;
}

void printList(node* n)
{
while(n)
{
cout << n->val;
n = n->next;
}
}

int main()
{
tree* t1 = new tree(1);
tree* t2 = new tree(2);
tree* t3 = new tree(3);
tree* t4 = new tree(4);
tree* t5 = new tree(5);
tree* t6 = new tree(6);
tree* t7 = new tree(7);
    
t1->left = t2;
t1->right = t7;
t2->left = t3;
t2->right = t5;
t3->left = t4;
t7->left = t6;
    
printList(LL(t1));

    



return 0;
}
