#include<vector>
#include<queue>
#include<iostream>
#include<cmath>
#include<climits>
#include<set>
#include<stdexcept>
#include<string>
#include<unordered_map>
#include<map>
#include"head.h"
#include<utility>

using namespace std;

struct tree
{
    int val;
    tree* left;
    tree* right;
    tree(int val) : val(val), left(NULL), right(NULL) {}
};

bool isSym(tree* root1, tree* root2)
{
    if(root1 == NULL && root2 == NULL){return true;}
    if(root1 == NULL && root2 != NULL){return false;}
    if(root2 == NULL && root1 != NULL){return false;}
    if(root1->val != root2->val){return false;}
    return isSym(root1->left, root2->right) && isSym(root1->right,root2->left);
    
}

bool Sym(tree* root)
{
    if(isSym(root->left,root->right))
    {
        return true;
    }
    return false;
}




int main()
{   
    tree* t1 = new tree(1);
    tree* t2 = new tree(3);
    tree* t3 = new tree(3);
    tree* t4 = new tree(5);
    tree* t5 = new tree(5);
    
    t1->left = t2;
    t2->left = t4;
    
    t1->right = t3;
    t3->right = t5;
    cout << Sym(t1);
    
    return 0;
}


