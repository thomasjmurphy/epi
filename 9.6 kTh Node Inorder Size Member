#include<vector>
#include<queue>
#include<iostream>
#include<cmath>
#include<climits>
#include<set>
#include<stdexcept>
#include<string>
#include<unordered_map>
#include<map>
#include"head.h"
#include<utility>

using namespace std;

struct tree
{
    int val;
    int size;
    tree* left;
    tree* right;
    tree(int val) : val(val), left(NULL), right(NULL) {}
};

tree* kthInOrder(tree* root, int k) //will have O(log n) time if the tree is balanced
{
    if(!root){return NULL;}
    if(!root->left && !root->right && k > 1){abort();}
    if(!root->left && !root->right && k == 1){return root;}
    if(!root->left && k == 1){return root;}
    
    
    
    if(root->left->size == k-1)
    {
        return root;
    }
    if(root->left->size < k-1)
    {
        return kthInOrder(root->right, k - root->left->size - 1);
    }
    if(root->left->size > k-1)
    {
        return kthInOrder(root->left, k);
    }
}

int main()
{   
    tree* t1 = new tree(1);
    tree* t2 = new tree(2);
    tree* t3 = new tree(3);
    tree* t4 = new tree(4);
    tree* t5 = new tree(5);
    
    t1->size = 5;
    t2->size = 3;
    t3->size = 1;
    t4->size = 1;
    t5->size = 1;
    
    t1->left = t2;
    t2->left = t4;
    
    t1->right = t3;
    t2->right = t5;
    
    cout << kthInOrder(t1,5)->val;
    
    return 0;
}


