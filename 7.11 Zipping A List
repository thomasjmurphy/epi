#include<vector>
#include<queue>
#include<iostream>
#include<cmath>
#include<climits>
#include<set>
#include<stdexcept>
#include<string>
#include<unordered_map>
#include<map>
#include"head.h"
using namespace std;


struct node
{
    int val;
    node* next;
    node(int val) : val(val), next(NULL) {}
};

node* reverse(node* head)
{
    node* tempL = NULL;
    node* curr = head;
    node* tempR = curr->next;
    while(curr->next != NULL)
    {
        tempR = curr->next;
        curr->next = tempL;
        tempL = curr;
        curr = tempR;
    }
    curr->next = tempL;
    return curr;
}

node* merge(node* a, node* b)   //a should have same length as b or 1 more.
{
    if(a == NULL){return NULL;}
    if(b == NULL){return a;}
    node* tempa = NULL;
    node* tempb = NULL;
    node* curra = a;
    node* currb = b;
    while(curra->next != NULL)
    {
        tempa = curra->next;
        curra->next = currb;
        curra = tempa;
        
        tempb = currb->next;
        currb->next = curra;
        currb = tempb;
    }
    if(currb != NULL)
    {
        curra->next = currb;
    }
    return a;
}


node* zip(node* head)
{
    int count = 0;
    int length = 0;
    node* curr = head;
    node* temp = NULL;
    while(curr != NULL)
    {
        curr = curr->next;
        length++;
    }
    curr = head;
    while(count < (length-1)/2)
    {
        curr = curr->next;
        count++;
    }
    temp = curr->next;
    curr->next = NULL;
    curr = temp;
    
    node* rev = reverse(curr);
    return merge(head,rev);
}


int main()
{
    node* n1 = new node(1);
    node* n2 = new node(2);
    node* n3 = new node(3);
    node* n4 = new node(4);
    node* n5 = new node(5);
    
    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = n5;
    n5->next = NULL;
   
    print(zip(n1));
    return 0;
}

