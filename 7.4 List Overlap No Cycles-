#include<vector>
#include<queue>
#include<iostream>
#include<cmath>
#include<climits>
#include<set>
#include<stdexcept>
#include<string>
#include<unordered_map>
#include<map>
#include"head.h"
using namespace std;


struct node
{
    int val;
    node* next;
    node(int val) : val(val), next(NULL) {}
};

node* find(node* a, node* b)
{
    int count = 0;
    int L = 0;
    int R = 0; // R = length-1
    int mid = 0;
    node* curra = a;
    node* currb = b;
    while(curra->next != NULL)
    {
        curra = curra->next;
        R++;
    }
    curra = a;
    mid = L + (R-L)/2;
    
    while(R-L > 1)
    {
        curra = a;
        count = 0;
        while(count < mid)
        {
            curra = curra->next;
            count++;
        }
        
        while(currb != NULL)
        {
            if(curra == currb)
            {
                R = mid;
                mid = L + (R-L)/2;
                break;
            }
            currb = currb->next;
        }
        
        L = mid;
        mid = L + (R-L)/2;
    }
    
    //repeat one more time after R-L <= 1/////////////
    curra = a;
        count = 0;
        while(count < mid)
        {
            curra = curra->next;
            count++;
        }
        
        while(currb != NULL)
        {
            if(curra == currb)
            {
                R = mid;
                mid = L + (R-L)/2;
                break;
            }
            currb = currb->next;
        }
        
        L = mid;
        mid = L + (R-L)/2;
    //Finished Repeat////////////////////
    return curra;
}


int main()
{
    node* n1 = new node(1);
    node* n2 = new node(2);
    node* n3 = new node(3);
    node* n4 = new node(4);
    node* n5 = new node(5);
    
    node* b1 = new node(1);
    node* b2 = new node(2);
    node* b3 = new node(3);
    
    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = n5;
    n5->next = NULL;
    
    b1->next = b2;
    b2->next = b3;
    b3->next = n3;
    
    print(find(n1,b1));
    return 0;
}

