#include<vector>
#include<queue>
#include<iostream>
#include<cmath>
#include<climits>
#include<set>
#include<stdexcept>
#include<string>
#include<unordered_map>
#include<map>
#include"head.h"
using namespace std;


struct node
{
    int val;
    node* next;
    node(int val) : val(val), next(NULL) {}
};

//Find first node in cycle assuming cycle exists
//Use this on both lists to get the first nodes
//which are accessible from each list.

node* find(node* a)
{
    node* curr1 = a->next;
    node* curr2 = a->next->next;
    while(curr1 != curr2)
    {
        curr1 = curr1->next;
        curr2 = curr2->next->next;
    }
    curr1 = a;
    while(curr1 != curr2)
    {
        curr1 = curr1->next;
        curr2 = curr2->next;
    }
    return curr1;
}


int main()
{
    node* n1 = new node(1);
    node* n2 = new node(2);
    node* n3 = new node(3);
    node* n4 = new node(4);
    node* n5 = new node(5);
    
    node* b1 = new node(1);
    node* b2 = new node(2);
    node* b3 = new node(3);
    
    n1->next = n2;
    n2->next = n3;
    n3->next = n4;
    n4->next = n5;
    n5->next = n2;
    
    b1->next = b2;
    b2->next = b3;
    b3->next = n5;
    
    cout  << find(n1)->val;
    //print(find(n1));
    return 0;
}

