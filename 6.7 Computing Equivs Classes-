#include<vector>
#include<queue>
#include<iostream>
#include<cmath>
#include<climits>
#include<set>
#include<stdexcept>
#include<string>
#include<unordered_map>
#include<map>
using namespace std;


void print(set<int> s)
{
    for(set<int>::iterator it = s.begin(); it != s.end(); it++)
    {
        cout << (*it);
    }
}
int inverse(vector<int> vec, int a) //assuming the inverse is unique. Returns -1 if DNE
{
    for(int i = 0;i<vec.size();i++)
    {
        if(vec[i] == a)
        {
            return i;
        }
    }
    return -1;
}


set<set<int>> equiv(vector<int> a, vector<int> b)
{
    set<set<int>> equiv;
    set<int> current;
    vector<bool> seen(a.size(),0);
    for(int i = 0;i<a.size();i++)
    {
        current.clear();
        if(seen[i] == 0)
        {
            seen[i] = 1;
            current.insert(a[0]);
            current.insert(b[0]);
            int temp1 = inverse(b,a[0]);
            int temp2 = inverse(a,b[0]);
            if(temp2 >=0){seen[temp2] = 1;}
            while((temp1 || temp2 >=0) && (temp1 != temp2))
            {
                if(temp1>=0){current.insert(b[temp1]);}
                if(temp2>=0){current.insert(a[temp2]);}
                
                if(temp2>=0){temp1 = inverse(b,a[temp2]);}
                else{temp1 = -1;}
                if(temp1>=0){temp2 = inverse(a,b[temp1]);}
                else{temp2 = -1;}
                
                if(temp2 >= 0){seen[temp2] = 1;}
            }
            equiv.insert(current);
        }
    }
  return equiv;
}

int main()
{
    vector<int> a = {1,5,3,6};
    vector<int> b = {2,1,0,5};
    set<set<int>> s = equiv(a,b);
    set<int> se = {1,2,5};
    print(se);
    for(set<set<int>>::iterator it = s.begin();it != s.end(); it++)
    {
        print(*it);
    }
    return 0;
}
